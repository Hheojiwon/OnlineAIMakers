name: Deploy to EC2

on:
  push:
    branches:
      - main  # 'main' 브랜치에 푸시될 때마다 배포 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # 코드 체크아웃

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # GitHub Secrets에 저장된 SSH 개인 키 사용

      - name: Copy files to EC2
        run: |
          scp -r ./study ec2-user@15.164.217.29:/home/ec2-user/deployment  # EC2 주소와 경로로 파일 전송

      - name: SSH into EC2 and deploy
        run: |
          ssh ec2-user@15.164.217.29 << 'EOF'
            cd /home/ec2-user/deployment
            # Green 환경에서 새 버전 실행 (새로운 버전의 컨테이너 시작)
            docker-compose -f docker-compose-green.yml up -d

            # 트래픽을 Green으로 전환하는 작업 (예: 로드 밸런서 설정에 따라 다름)
            # 여기에서는 별도의 Nginx나 로드 밸런서 없이도 바로 Green 환경으로 전환하는 방식
            # 트래픽 전환 후 Blue 환경의 기존 컨테이너 종료 (선택적)
            docker-compose -f docker-compose-blue.yml down  # Blue 환경 종료

            # Green 환경으로 정상적으로 전환되면, 새 버전의 서비스가 실행됨
          EOF
